A few things that are different from how Hosto is used:
1. Tenant and domain are created BEFORE a user is actually created
2. There could be a Tenant and a Domain that exist without ever creating a User or Team (they just use the app view and never modify theme files)

This means we need to consider a few things:
1. How does authentication work for the first time? Someone who first used the app through Confluence admin then goes to "customize" should then be prompted to create an account with the cloud ID of the tenant hidden in the field so that we can make the association.
2. We need to associate the newly created user/team to the tenant/domain pair so that the dashboard and page builder work as expected
    1) Consider using signed URLs for this use case: https://laravel.com/docs/12.x/urls#validating-signed-route-requests

TODO:
Connect to development forge app and connect to populate the tables and opensearch
Update Team name to Company name at some point
    1) Also, make this editable so you can change company name or at least set it during registration
Let users upload their own logos and display it in the dashboard AND on the website



THEMES 
Need to think of a good way to manage themes.

Themes are all different UI elements that can apply to different use cases. Each theme has blocks and layouts. 
Layout files are strict and don't allow for drag and dropping, but they provide a lot of structure.
Blocks are smaller pieces of UI (e.g: Title, subtitle, buttons, etc.)

Themes are sort of the style, but pages are still required to be created in order to display things on the front-end. 
So like Hosto, there will need to be pages created for each new theme (a base of X amount of pages per theme, 
and they will vary per theme since each theme has a different use-case).

So I think pages will need to be associated with themes. We will have a page <--> theme association so that the user can swap themes.

There will also need to be a theme <--> tenant/domain association so we can render the proper theme. TBD if its domain vs tenant.
Leaning towards domain right now for some reason but implemenation will tell.

Start there, first goal should be the ability to 'publish' a new theme that is hard-coded in the app's file system before moving to 
S3 and using more of a database driven system.

Other things TODO are things like the clone/edit/delete funcitonality for each theme. Not necessary to implement yet. 
Just get V1 done